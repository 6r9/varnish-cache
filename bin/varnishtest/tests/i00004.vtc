# $Id$

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
varnishtest "Verify the semantics of keep (timeout for conditional requests)"
=======
test "Verify the semantics of keep (timeout for conditional requests)"
>>>>>>> Merged conditional backend request feature
=======
varnishtest "Verify the semantics of keep (timeout for conditional requests)"
>>>>>>> Merge conditional backend requests with current trunk
=======
test "Verify the semantics of keep (timeout for conditional requests)"
>>>>>>> Merged conditional backend request feature

server s1 {
        rxreq
        expect req.url == "/foo"
        txresp -status 200 \
    	    -hdr "Last-Modified: Thu, 26 Jun 2008 12:00:01 GMT" \
            -body "foo bar baz quux"

        rxreq
        expect req.url == "/foo"
        expect req.http.If-Modified-Since == "Thu, 26 Jun 2008 12:00:01 GMT"
        txresp -status 304

        rxreq
        expect req.url == "/foo"
        expect req.http.If-Modified-Since != "Thu, 26 Jun 2008 12:00:01 GMT"
        txresp -status 200 -body "foo bar baz quux"
} -start

varnish v1 -vcl+backend {
        sub vcl_fetch {
            set beresp.grace = 0s;
            set beresp.ttl = 1s;
        }
} -start

client c1 {
        txreq -url "/foo"
        rxresp
        expect resp.status == 200
        expect resp.http.content-length == 16
        expect resp.http.Age == 0
}

varnish v1 -cli "param.set default_keep 1"

client c1 -run

delay 1.1

client c1 -run

delay 2.1

client c1 -run

varnish v1 -expect fetch_304 == 1
varnish v1 -expect cond_not_validated == 0

server s1 -wait
varnish v1 -stop

## Start a new varnish (now using the default default_keep),
## and manipulate beresp.keep in VCL

server s1 -start

varnish v1 -vcl {
    backend s1 {
            .host = "${s1_addr}"; .port = "${s1_port}";
    }

    sub vcl_fetch {
        set beresp.grace = 0s;
        set beresp.ttl = 1s;
        set beresp.keep = 1s;
    }
} -start

client c1 -run

delay 1.1

client c1 -run

delay 2.1

client c1 -run

varnish v1 -expect fetch_304 == 1
varnish v1 -expect cond_not_validated == 0

server s1 -wait
varnish v1 -stop

## Manipulate obj.keep in vcl_hit()

server s1 -start

varnish v1 -vcl {
    backend s1 {
            .host = "${s1_addr}"; .port = "${s1_port}";
    }

    sub vcl_fetch {
        set beresp.grace = 0s;
        set beresp.ttl = 1s;
    }

    sub vcl_hit {
        set obj.keep = 1s;
    }
} -start

client c1 -run

delay 1.1

client c1 -run

delay 2.1

client c1 -run

varnish v1 -expect fetch_304 == 1
varnish v1 -expect cond_not_validated == 0

server s1 -wait
varnish v1 -stop

## Manipulate obj.keep in vcl_error()

server s1 -start

varnish v1 -vcl {
    backend s1 {
            .host = "${s1_addr}"; .port = "${s1_port}";
    }

    sub vcl_fetch {
        set beresp.grace = 0s;
        set beresp.ttl = 1s;
    }

    sub vcl_hit {
        error 200 "Ok";
    }

    sub vcl_error {
        set obj.keep = 1s;
        return(deliver);
    }
} -start

client c1 {
        txreq -url "/foo"
        rxresp
        expect resp.status == 200
}

client c1 -run

delay 1.1

client c1 -run

delay 2.1

client c1 -run

varnish v1 -expect fetch_304 == 1
varnish v1 -expect cond_not_validated == 0

server s1 -wait
varnish v1 -stop

## req.keep sets an upper bound for all *.keeps in a session

server s1 -start

varnish v1 -vcl {
    backend s1 {
            .host = "${s1_addr}"; .port = "${s1_port}";
    }

    sub vcl_recv {
        set req.keep = 0.5s;
    }

    sub vcl_fetch {
        set beresp.grace = 0s;
        set beresp.ttl = 1s;
        set beresp.keep = 1s;
    }
} -start

client c1 -run

delay 1.1

client c1 -run

delay 1.6

client c1 -run

varnish v1 -expect fetch_304 == 1
varnish v1 -expect cond_not_validated == 0
